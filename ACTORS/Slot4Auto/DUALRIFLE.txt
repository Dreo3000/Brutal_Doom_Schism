	ACTOR DualRifles: BrutalWeapon
	{
		Weapon.AmmoUse1 0 
		Weapon.SelectionOrder 5100
		Weapon.AmmoGive1 0 //How much ammo can be gathered with this weapon
		Weapon.AmmoUse2 0
		Weapon.AmmoGive2 0
			Weapon.BobRangeX 0.4
		Weapon.BobRangeY 0.6
		Weapon.BobSpeed 2.9
			Weapon.BobStyle InverseSmooth
		Weapon.AmmoType1 "Clip2" //Reserve ammo type
		Weapon.AmmoType2 "DoubleRifleAmmo" //Magazine ammo type
		Obituary "%o was drilled by %k's Double Rifles." //Kill message
		AttackSound "None" //You better leave this clear
		Inventory.Pickupmessage "" //Pickup message
		+WEAPON.NOAUTOAIM //Makes this weapon never autoaim, so recoil can work better
		Scale 0.6 //Weapon's pickup sprite size
		+WEAPON.NOAUTOFIRE
		+WEAPON.NO_AUTO_SWITCH
		States
		{
			Spawn:
		TNT1 A 100//Pickup sprite
		Loop
		Ready3:
		ReadyLoop:
		//Ready:
		SelectAnimation:
			TNT1 A 0
			TNT1 A 0 A_PlaySound("CLIPIN", 1)
			P2SS AB 1
			TNT1 A 0 A_TakeInventory("StopDualWield", 1)
			TNT1 A 0 A_PlaySound("CLIPIN", 3)
			P2SS CDEF 1
			TNT1 A 0 A_GunFlash
			Goto ReadyToFire
				RemoveDual:
			 TNT1 A 0 A_GiveInventory("Rifle", 1)
			 TNT1 A 0 A_TakeInventory("DualRifles", 1)
			 Goto Ready
				Fire:
		TNT1 A 0
		TNT1 A 0 A_JumpIfInventory("FiredPrimary",1,"FireLeftGun") //Check if player wants to reload
		P2W2 A 1 //A_WeaponReady(WRF_NOFIRE)
		TNT1 A 0 A_JumpIfInventory("FiredPrimary",1,"FireLeftGun") //Check if player wants to reload
		TNT1 A 0 A_Refire
		Goto ReadyToFire
			AltFire:
			TNT1 A 0
			Goto ReadyToFire
			Ready:
		ReadyToFire:
			TNT1 A 0
			TNT1 A 0 A_SetCrosshair(61)
			TNT1 A 0 A_JumpIfInventory("FiredPrimary",1,"FireLeftGun") //Check if player wants to reload
			P2W2 A 1 A_WeaponReady// Weapon is ready to fire
			//TNT1 A 0 A_JumpIfInventory("IsFiringSecondary", 1, 1)
			//TNT1 A 0 A_GunFlash
			TNT1 A 0 A_JumpIfInventory("FiredPrimary",1,"FireLeftGun") //Check if player wants to reload
			TNT1 A 0 A_JumpIfInventory("Reloading",1,"Reload2") //Check if player wants to reload
			TNT1 A 0 A_JumpIfInventory("Kicking",1,"DoKick")
			TNT1 A 0 A_JumpIfInventory("Taunting",1,"Taunt")
			TNT1 A 0 A_JumpIfInventory("Salute1", 1, "Salute")
			TNT1 A 0 A_JumpIfInventory("Salute2", 1, "Salute")
			TNT1 A 0 A_JumpIfInventory("Unloading",1,"Unload")
			TNT1 A 0 A_JumpIfInventory("TossGrenade",1,"TossGrenade")
			DURI A 0 A_JumpIfInventory("StartDualWield",1,"DualWield")
			"####" F 0 A_JumpIfInventory("Quickspell",1,"Quickspell")
			Loop
					DualWield:
			P2SS FEDCBA 1
			DURI A 0
			DURI A 0 A_Takeinventory("StartDualWield",1)
			DURI A 0 A_SelectWEapon("Rifle")
			Goto Ready
					Deselect:
			TNT1 A 0 A_Lower
			Loop
				Select:
			//TNT1 A 0 A_Raise //Makes the weapon always be selected fast
			//Wait
			TNT1 A 1 A_Raise
			TNT1 AAAAAAAAAAAAAA 0 A_Raise
			Goto SelectAnimation
			SpellFlash:
			RMSF ABCDEEEFFGGGGGGGGGGGFFEEDCBA 1
			stop	
			DryFire:
			P2W2 A 0 A_PlaySound("DRYFIRE", 1)
			P2W2 A 10
			Goto ReadyToFire
			FireLeftGun:
			P2W2 A 0
			TNT1 A 0 A_JumpIfInventory("DoubleRifleAmmo", 1, 1)//First of all, checks if there is ammo inside the gun
			Goto Reload//Couldn't find any ammo. Reload
					TNT1 A 0 A_JumpIfInventory("LeftRifleAmmo", 1, 1)//Checks if there is ammo inside the left Rifle
			Goto DryFire//Couldn't find any ammo. Don't fire.
					TNT1 A 0 A_TakeInventory("DoubleRifleAmmo", 1)//Removes 1 ammo from magazine
			TNT1 A 0 A_AlertMonsters
			TNT1 A 0 A_FireCustomMissile("Tracer", random(-4,4), 0, -6, -2, 0, random(-2,2))
			RIFF A 0 A_FireCustomMissile("GunFireSmoke", 0, 0, -5, 0, 0, 0)
			TNT1 A 0 A_PlaySound("weapons/rifle", 1)//Play gun fire sound
			P2W2 B 1 BRIGHT A_FireBullets(12,3,-1,10,"MachineGunBulletPuff",1)//Horizontal Spread, Vertical Spread, Numbers of Projectiles (Leave as -1 if its a single one), Damage Factor
			TNT1 A 0 A_SetPitch(+0.6 + pitch)//Vertical recoil up
			P2W2 C 1 A_FireCustomMissile("RifleCaseSpawn",0,0,-20,-10) //Ejetts empty brass
			P2W2 C 0 A_SetPitch(-0.6 + pitch)//Vertical recoil down
			P2W2 D 1 A_TakeInventory("LeftRifleAmmo", 1)//Remove the fake ammo
			TNT1 A 0 A_JumpIfInventory("DoubleRifleAmmo", 1, 1)//Checks if there is ammo inside the gun
			Goto Reload//Couldn't find any ammo. Reload.
			P2W2 A 1
			TNT1 A 0 A_JumpIfInventory("LeftRifleAmmo", 1, 1)//Checks if there is ammo inside the left Rifle
			Goto DryFire//Couldn't find any ammo. Don't fire.
			TNT1 A 0 A_JumpIfInventory("FiredPrimary",1,"FireLeftGun") //Check if player still is firing left gun
			P2W2 A 0
			Goto Fire//No need to reload. Get back to Ready state.
				Flash:	
			TNT1 A 0
			TNT1 A 0 A_JumpIfInventory("StopDualWield", 1, "LightDone")
			TNT1 A 0 A_JumpIfInventory("TossGrenade", 1, "GoAway")
			P2W1 A 1
			TNT1 A 0 A_JumpIfInventory("FiredSecondary", 1, "FireRightGun")
			TNT1 A 0 A_JumpIfInventory("StartDualWield",1,"GoAway")
			Loop
			GoAway:
			TNT1 A -1
			Stop
			DontFlash:
			TNT1 A 1
			Goto Flash
			FireRightGun:
			P2W1 A 0
					TNT1 A 0 A_JumpIfInventory("StopDualWield", 1, "LightDone")
			TNT1 A 0 A_GiveInventory("IsFiringSecondary", 1)
			TNT1 A 0 A_JumpIfInventory("DoubleRifleAmmo", 1, 2)//First of all, checks if there is ammo inside the gun
			TNT1 A 0 //A_GiveInventory("Reloading", 1)//Couldn't find any ammo. Reload
			Goto Flash//Couldn't find any ammo. Reload
					TNT1 A 0 A_JumpIfInventory("RifleAmmo", 1, 1)//Checks if there is ammo inside the left Rifle
			Goto DryFire2//Couldn't find any ammo. Don't fire.
					TNT1 A 0 A_TakeInventory("DoubleRifleAmmo", 1)//Removes 1 ammo from magazine
					TNT1 A 0 A_AlertMonsters
			TNT1 A 0 A_FireCustomMissile("Tracer", random(-4,4), 0, 6, -2, 0, random(-2,2))
			RIFF A 0 A_FireCustomMissile("GunFireSmoke", 0, 0, 5, 0, 0, 0)
			TNT1 A 0 A_PlaySound("weapons/rifle", 1)//Play gun fire sound
			P2W1 B 1 BRIGHT A_FireBullets(12,3,-1,10,"MachineGunBulletPuff",1)//Horizontal Spread, Vertical Spread, Numbers of Projectiles (Leave as -1 if its a single one), Damage Factor
			TNT1 A 0 A_SetPitch(+0.6 + pitch)//Vertical recoil up
			P2W1 C 1 A_FireCustomMissile("RifleCaseSpawn",0,0,20,-10) //Ejetts empty brass
			P2W1 C 0 A_SetPitch(-0.6 + pitch)//Vertical recoil down
			P2W1 D 1 A_TakeInventory("RifleAmmo", 1)//Remove the fake ammo
			P2W1 A 0
			TNT1 A 0 A_JumpIfInventory("DoubleRifleAmmo", 1, 3)//Checks if there is ammo inside the gun
			TNT1 A 0 //A_GiveInventory("Reloading", 1)//Couldn't find any ammo. Reload
			TNT1 A 0 A_JumpIfInventory("RifleAmmo", 1, 1)//Checks if there is ammo inside the right Rifle
			Goto DryFire2//Couldn't find any ammo. Don't fire.
			P2W1 A 1
			TNT1 A 0 A_JumpIfInventory("FiredSecondary", 1, "FireRightGun")
			Goto Flash
				DryFIre2:
			P2W1 A 1 A_PlaySound("DRYFIRE", 1)
			P2W1 AAAAAAAAAA 1 A_JumpIfInventory("StopDualWield", 1, "LightDone")
			Goto Flash
					TossGrenade:
			P2SS FEDCBA 1
			TNT1 A 0 A_SetCrosshair(41)
			WTFL A 0 A_JumpIfInventory("IsPaladin",1,"PallyGrenadeToss")
			TNT1 A 0 A_TakeInventory("TossGrenade", 1)
			TNT1 A 0 A_JumpIfInventory("GrenadeAmmo", 1, 3)
			TNT1 A 0 A_Print("No Grenades Left.")
			//TNT1 A 0 A_Jump(256, "Ready")
			Goto SelectAnimation
			GRTH ABCD 1
			TNT1 A 0 A_GiveInventory("FiredGrenade", 1)
			TNT1 A 0 A_Giveinventory("Punching",1)
			TNT1 A 0 A_Giveinventory("GoSpecial",1)
			TNT1 A 0 A_PLaySound ("GRNPIN")
			GRTH EEFG 1
			TNT1 A 0 A_PLaySound ("GRNTOSS")
			GRTH HI 1
			TNT1 A 0 A_TakeInventory("GrenadeAmmo", 1)
			TNT1 A 0 A_FireCustomMissile("HandGrenade", random(-2,2), 0, 0, 0, 0, 0)
			TNT1 A 0 A_TakeInventory("FiredGrenade", 1)
			GRTH JKLM 1
			TNT1 A 1
			TNT1 A 0 A_TakeInventory("TossGrenade", 1)
			Goto SelectAnimation
		PallyGrenadeToss:
			TNT1 A 0 A_TakeInventory("TossGrenade", 1)
			TNT1 A 0 A_JumpIfInventory("GrenadeAmmo", 1, 1)
			Goto PallyNoGrenade
			TNT1 A 0 A_GiveInventory("FiredGrenade", 1)
			TNT1 A 0 A_PLaySound ("GRNPIN")
			TNT1 A 4 //wait a moment
			WTFL ABCDEF 1
			TNT1 A 0 A_PLaySound ("GRNTOSS")
			TNT1 A 0 A_TakeInventory("GrenadeAmmo", 1)
			TNT1 A 0 A_FireCustomMissile("HandGrenade", random(-2,2), 0, 0, 0, 0, 0)
			TNT1 A 0 A_TakeInventory("FiredGrenade", 1)
			WTFL GHIJKL 1
			Goto SelectAnimation
		PallyNoGrenade:
			TNT1 A 0 A_Print("No Grenades Left.")
			//TNT1 A 0 A_Jump(256, "GoingToReady")
			Goto SelectAnimation
				Reload:
			TNT1 A 0 A_JumpIfInventory("DoubleRifleAmmo", 1, "Reload2")
			P2SG A 1 //Always leave one free line before the reload animation to prevent bugs
			TNT1 A 0 A_TakeInventory("Reloading")//Always put this to make sure that the game understand that you already are reloading your weapon, and calling this state again is not necessary
			TNT1 A 0 A_JumpIfInventory("DoubleRifleAmmo", 60, "ReadytoFire")//Checks if the weapon is not fully reloaded, if yes, cancel reload.
			TNT1 A 0 A_PlaySound("DRYFIRE", 1)
			TNT1 A 0 A_JumpIfInventory("Clip2", 1, 1)//Checks if you have spare ammo
			Goto DryFire//Identified that you have no spare ammo. Get back to Ready animation
			TNT1 A 0 A_GiveInventory("StopDualWield", 1)
				Refill:	
			TNT1 A 0
			TNT1 A 0 A_JumpIfInventory("Clip2", 1, 1)//Check if you have spare ammo again. This line is necessary in case you don't have enough ammo to fill an entire clip.
			Goto FinishReload//Gun is fully loaded. Go to finish animation
			TNT1 A 0 A_TakeInventorY("Clip2", 1)//Removes one spare bullet
			TNT1 A 0 A_GiveInventory("DoubleRifleAmmo", 1)//Puts one bullet inside the clip
			TNT1 A 0 A_JumpIfInventory("DoubleRifleAmmo", 60, "FinishReload")//Checks if weapons is full
			Loop
				 FinishReload:	//Weapon is fully loaded. Time to play the reloading animation.
			TNT1 A 0
			TNT1 A 0 A_JumpIfInventory ("IsPaladin", 1, "FinishReloadP")
			TNT1 A 0 A_JumpIfInventory ("IsSorcerer", 1, "FinishReloadS")
			TNT1 A 0 A_JumpIfInventory("LeftRifleAmmo", 31, "FinishReloadRightOnly")
			TNT1 A 0 A_JumpIfInventory("RifleAmmo", 31, "FinishReloadLeftOnly")
			TNT1 A 0 A_GiveInventory("LeftRifleAmmo", 30)
			TNT1 A 0 A_GiveInventory("RifleAmmo", 30)
			P2SS FEDCBA 1
			TNT1 A 5
			TNT1 A 0 A_PlaySound("RELOAD", 1)//reload sound
			TNT1 A 0 A_JumpIfInventory("HasUnloaded", 1, 2)
			TNT1 A 0 A_FireCustomMissile("EmptyClipSpawn",185,0,8,-4)
			R2RR ABCDDDDDDEFGHIIJJKLMNO 1
			TNT1 A 10
			TNT1 A 0 A_PlaySound("RELOAD", 1)//reload sound
			TNT1 A 0 A_JumpIfInventory("HasUnloaded", 1, 2)
			TNT1 A 0 A_FireCustomMissile("EmptyClipSpawn",-5,0,8,-4)
			R2RL ABCDDDDDDEFGHIIJJKLMNO 1
			TNT1 A 0 A_TakeInventory("StopDualWield", 1)
			TNT1 A 0 A_TakeInventory("FiredPrimary", 1)
			TNT1 A 0 A_TakeInventory("FiredSecondary", 1)
			TNT1 A 5
			P2SS ABCDEF 1
			TNT1 A 0 A_TakeInventory("Reloading")//Always put this to make sure that the game understand that you already are reloading your weapon, and calling this state again is not necessary
			TNT1 A 0 A_GunFlash
			TNT1 A 0 A_Takeinventory("HasUnloaded",1)
			Goto ReadyToFire
				FinishReloadS:	//Weapon is fully loaded. Time to play the reloading animation.
			TNT1 A 0
			TNT1 A 0 A_JumpIfInventory("LeftRifleAmmo", 31, "FinishReloadRightOnly")
			TNT1 A 0 A_JumpIfInventory("RifleAmmo", 31, "FinishReloadLeftOnly")
			TNT1 A 0 A_GiveInventory("LeftRifleAmmo", 30)
			TNT1 A 0 A_GiveInventory("RifleAmmo", 30)
			P2SS FEDCBA 1
			TNT1 A 5
			TNT1 A 0 A_PlaySound("RELOAD", 1)//reload sound
			TNT1 A 0 A_JumpIfInventory("HasUnloaded", 1, 2)
			TNT1 A 0 A_FireCustomMissile("EmptyClipSpawn",185,0,8,-4)
			R2MR ABCDDDDDDEFGHIIJJKLMNO 1
			TNT1 A 10
			TNT1 A 0 A_PlaySound("RELOAD", 1)//reload sound
			TNT1 A 0 A_JumpIfInventory("HasUnloaded", 1, 2)
			TNT1 A 0 A_FireCustomMissile("EmptyClipSpawn",-5,0,8,-4)
			R2ML ABCDDDDDDEFGHIIJJKLMNO 1
			TNT1 A 0 A_TakeInventory("StopDualWield", 1)
			TNT1 A 0 A_TakeInventory("FiredPrimary", 1)
			TNT1 A 0 A_TakeInventory("FiredSecondary", 1)
			TNT1 A 5
			P2SS ABCDEF 1
			TNT1 A 0 A_TakeInventory("Reloading")//Always put this to make sure that the game understand that you already are reloading your weapon, and calling this state again is not necessary
			TNT1 A 0 A_GunFlash
			TNT1 A 0 A_Takeinventory("HasUnloaded",1)
			Goto ReadyToFire
				 FinishReloadP:	//Weapon is fully loaded. Time to play the reloading animation.
			TNT1 A 0
			TNT1 A 0 A_JumpIfInventory("LeftRifleAmmo", 31, "FinishReloadRightOnly")
			TNT1 A 0 A_JumpIfInventory("RifleAmmo", 31, "FinishReloadLeftOnly")
			TNT1 A 0 A_GiveInventory("LeftRifleAmmo", 30)
			TNT1 A 0 A_GiveInventory("RifleAmmo", 30)
			P2SS FEDCBA 1
			TNT1 A 5
			TNT1 A 0 A_PlaySound("RELOAD", 1)//reload sound
			TNT1 A 0 A_JumpIfInventory("HasUnloaded", 1, 2)
			TNT1 A 0 A_FireCustomMissile("EmptyClipSpawn",185,0,8,-4)
			P2RR ABCDDDDDDEFGHIIJJKLMNO 1
			TNT1 A 10
			TNT1 A 0 A_PlaySound("RELOAD", 1)//reload sound
			TNT1 A 0 A_JumpIfInventory("HasUnloaded", 1, 2)
			TNT1 A 0 A_FireCustomMissile("EmptyClipSpawn",-5,0,8,-4)
			P2RL ABCDDDDDDEFGHIIJJKLMNO 1
			TNT1 A 0 A_TakeInventory("StopDualWield", 1)
			TNT1 A 0 A_TakeInventory("FiredPrimary", 1)
			TNT1 A 0 A_TakeInventory("FiredSecondary", 1)
			TNT1 A 5
			P2SS ABCDEF 1
			TNT1 A 0 A_TakeInventory("Reloading")//Always put this to make sure that the game understand that you already are reloading your weapon, and calling this state again is not necessary
			TNT1 A 0 A_GunFlash
			TNT1 A 0 A_Takeinventory("HasUnloaded",1)
			Goto ReadyToFire
					//Reload 2 is for manual reload, leaves one more bullet inside the gun.
				Reload2:
			TNT1 A 0 A_SetCrosshair(41)
			P2SG A 1 //Always leave one free line before the reload animation to prevent bugs
			TNT1 A 0 A_TakeInventory("Reloading")//Always put this to make sure that the game understand that you already are reloading your weapon, and calling this state again is not necessary
			TNT1 A 0 A_JumpIfInventory("DoubleRifleAmmo", 62, "ReadytoFire")//Checks if the weapon is not fully reloaded, if yes, cancel reload.
			TNT1 A 0 A_JumpIfInventory("Clip2", 1, 1)//Checks if you have spare ammo
			Goto ReadyToFire//The game identified that you have no spare ammo. Get back to Ready animation
			TNT1 A 0 A_GiveInventory("StopDualWield", 1)
				Refill2:	
			TNT1 A 0
					TNT1 A 0 A_JumpIfInventory("Clip2", 1, 1)//Check if you have spare ammo again. This line is necessary in case you don't have enough ammo to fill an entire clip.
			Goto FinishReloadLeft
			TNT1 A 0 A_TakeInventorY("Clip2", 1)//Removes one spare bullet
			TNT1 A 0 A_GiveInventory("DoubleRifleAmmo", 1)//Puts one bullet inside the clip
			TNT1 A 0 A_JumpIfInventory("LeftRifleAmmo", 1, 2) //CHeck which gun is not empty, as Reload2 is the case for DoubleRifleAmmo >= 1
			TNT1 A 0 A_JumpIfInventory("DoubleRifleAmmo", 61, "FinishReloadLeft")
			TNT1 A 0 A_JumpIfInventory("RifleAmmo", 1, 2) //CHeck which gun is not empty, as Reload2 is the case for DoubleRifleAmmo >= 1
			TNT1 A 0 A_JumpIfInventory("DoubleRifleAmmo", 61, "FinishReloadLeft")
			TNT1 A 0 A_JumpIfInventory("DoubleRifleAmmo", 62, "FinishReloadLeft")//Checks if weapons is full
			Loop
					FinishReloadLeft:	//Weapon is fully loaded. Time to play the reloading animation.
			TNT1 A 0 A_JumpIfInventory("LeftRifleAmmo", 31, "FinishReloadRight")//Gun is fully loaded. Go to finish animation
			TNT1 A 0 A_GiveInventory("LeftRifleAmmo", 30)
			//TNT1 A 0 A_GiveInventory("RifleAmmo", 62)
			P2SS FEDCBA 1
			TNT1 A 5
			TNT1 A 0 A_PlaySound("RELOAD", 1)//reload sound
			TNT1 A 0 A_JumpIfInventory("HasUnloaded", 1, 2)
			TNT1 A 0 A_FireCustomMissile("EmptyClipSpawn",185,0,8,-4)
					P2RR A 0 A_JumpIfInventory("IsPaladin",1,3)
			R2MR A 0 A_JumpIfInventory("IsSorcerer",1,2)
			R2RR A 0
			"####" ABCDDDDDDEFGHIIJJKLMNO 1
					//TNT1 A 0 A_TakeInventory("StopDualWield", 1)
			TNT1 A 0 A_TakeInventory("FiredPrimary", 1)
			TNT1 A 0 A_TakeInventory("FiredSecondary", 1)
			TNT1 A 5
			P2SS ABCDEF 1
			TNT1 A 0 A_TakeInventory("Reloading")//Always put this to make sure that the game understand that you already are reloading your weapon, and calling this state again is not necessary
			TNT1 A 0 A_JumpIfInventory("RifleAmmo", 31, 1)
			Goto FinishReloadRight
			TNT1 A 0 A_TakeInventory("StopDualWield",1)
			TNT1 A 0 A_GunFlash
			Goto ReadyToFire	
				FinishReloadRight:	//Weapon is fully loaded. Time to play the reloading animation.
			//TNT1 A 0 A_GiveInventory("LeftRifleAmmo", 62)
			TNT1 A 0 A_GiveInventory("RifleAmmo", 30)
			P2SS FEDCBA 1
			TNT1 A 5
			TNT1 A 0 A_PlaySound("RELOAD", 1)//reload sound
			TNT1 A 0 A_JumpIfInventory("HasUnloaded", 1, 2)
			TNT1 A 0 A_FireCustomMissile("EmptyClipSpawn",-5,0,8,-4)
					P2RL A 0 A_JumpIfInventory("IsPaladin",1,3)
			R2ML A 0 A_JumpIfInventory("IsSorcerer",1,2)
			R2RL A 0
			"####" ABCDDDDDDEFGHIIJJKLMNO 1
					TNT1 A 0 A_TakeInventory("StopDualWield", 1)
			TNT1 A 0 A_TakeInventory("FiredPrimary", 1)
			TNT1 A 0 A_TakeInventory("FiredSecondary", 1)
			TNT1 A 5
			P2SS ABCDEF 1
			TNT1 A 0 A_TakeInventory("Reloading")//Always put this to make sure that the game understand that you already are reloading your weapon, and calling this state again is not necessary
			TNT1 A 0 A_GunFlash
			TNT1 A 0 A_Takeinventory("HasUnloaded",1)
			Goto ReadyToFire		
				CheckSprint:
			DURI A 1 A_WeaponReady(WRF_NOFIRE)
			TNT1 A 0 A_JumpIfInventory("IsStandingStill", 1, "Ready3")
			TNT1 A 0 A_JumpIfInventory("IsTacticalClass", 1, "StartSprint")
			Goto Ready3
				StartSprint:
			DURI A 1 A_WeaponReady(WRF_NOFIRE)
			TNT1 A 0 A_Takeinventory("Zoomed",1)
			TNT1 A 0 A_Takeinventory("ADSmode",1)
			TNT1 A 0 A_ZoomFactor(1.0)
			TNT1 A 0 A_JumpIfInventory("UsedStamina", 40, "StopSprintTired")
				Sprinting:	
			DURR A 0 offset(-9,32) 
			TNT1 A 0 offset(-9,32) A_JumpIfInventory("IsStandingStill", 1, "Ready3")
			TNT1 A 0 offset(-9,32) A_JumpIfInventory("UsedStamina", 100, "StopSprintTired")
			PLAY A 0 offset(-9,32) ACS_ExecuteAlways(852, 0, 0, 0, 0)//Makes player faster.
			TNT1 A 0 offset(-9,32) A_JumpIfInventory("PowerStrength", 1, 2)
			TNT1 A 0 offset(-9,32) A_GiveInventory("UsedStamina", 9)
			TNT1 A 0 offset(-9,32)
			DURR A 1 offset(-9,34) A_SetPitch(pitch -0.5)
			DURR A 1 offset(-6,36) A_SetPitch(pitch -0.5)
			DURR A 1 offset(-3,38) A_SetPitch(pitch -0.5)
			DURR A 1 offset(0,38) A_SetPitch(pitch -0.5)
			DURR A 1 offset(3,36) A_SetPitch(pitch -0.5)
			DURR A 1 offset(6,34) A_SetPitch(pitch -0.5)
			DURR A 1 offset(9,32) A_SetPitch(pitch -0.5)
			TNT1 A 0 offset(9,32) A_WeaponReady(WRF_NOBOB)
			TNT1 A 0 A_JumpIfInventory("Kicking",1,"DoKick")
			TNT1 A 0 A_JumpIfInventory("Taunting",1,"Taunt")
			TNT1 A 0 A_JumpIfInventory("Reloading",1,"Reload")
			TNT1 A 0 offset(-9,32) A_GiveInventory("UsedStamina", 9)
			TNT1 A 0 offset(9,33) A_SpawnItemEx("FootStep", 0, 0, 2, 0, 0, -4)
			DURR A 1 offset(9,34) A_SetPitch(pitch +0.5)
			DURR A 1 offset(6,36) A_SetPitch(pitch +0.5)
			DURR A 1 offset(3,38) A_SetPitch(pitch +0.5)
			DURR A 1 offset(0,38) A_SetPitch(pitch +0.5)
			DURR A 1 offset(-3,36) A_SetPitch(pitch +0.5)
			DURR A 1 offset(-6,34) A_SetPitch(pitch +0.5)
			DURR A 1 offset(-9,32) A_SetPitch(pitch +0.5)
			TNT1 A 0 offset(-9,32) A_WeaponReady(WRF_NOBOB)
			TNT1 A 0 offset(-9,32) A_JumpIfInventory("IsRunning", 1, "Sprinting")
			Goto StopSprint
				StopSprintTired:
			DURI A 1 
			PLAY A 0 ACS_ExecuteAlways(853, 0, 0, 0, 0)//Makes player slower.
			TNT1 A 0 A_PlaySound("Tired", 2)
			TNT1 A 0 A_TakeInventory("UsedStamina", 2)
			DURI A 5 A_WeaponReady
			TNT1 A 0 A_TakeInventory("UsedStamina", 2)
			DURI A 5 A_WeaponReady
			TNT1 A 0 A_TakeInventory("UsedStamina", 2)
			DURI A 5 A_WeaponReady
			TNT1 A 0 A_TakeInventory("UsedStamina", 2)
			DURI A 5 A_WeaponReady
			TNT1 A 0 A_TakeInventory("UsedStamina", 2)
			DURI A 5 A_WeaponReady
			Goto Ready3
		StopSprint:
			DURI A 1 A_WeaponReady(WRF_NOFIRE)
			TNT1 A 0 A_JumpIfInventory("UsedStamina", 60, "StopSprintTired")
			PLAY A 0 ACS_ExecuteAlways(853, 0, 0, 0, 0)//Makes player slower.
			Goto Ready3
			DoKick:
			TNT1 A 0
			TNT1 A 0 A_SetCrosshair(41)
			TNT1 AA 1 A_JumpIfInventory("GoFatality", 1, "GoingToReady")
			TNT1 A 0 A_Takeinventory("HasPlasmaWeapon",1)
			TNT1 A 0 A_TAkeinventory("HasCutingWeapon",1)
			TNT1 A 0 A_Takeinventory("Zoomed",1)
			TNT1 A 0 A_Takeinventory("PowerLightAmp",1)
			TNT1 A 0 A_ZoomFactor(1.0)
			TNT1 A 0 A_Takeinventory("ADSmode",1)
			TNT1 A 0 A_JumpIfInventory("ExecuteDownedEnemy", 1, "DoExecution")
			NULL A 0 A_JumpIf (momZ > 0, "AirKick")
			NULL A 0 A_JumpIf (momZ < 0, "AirKick")
			TNT1 A 0 A_JumpIfInventory("IsCrouching", 1, "SlideAttack")
			TNT1 A 0 A_jumpifinventory("PowerStrength",1,"BerserkerKick")
			//TNT1 A 0 A_JumpIfInventory("RifleSelected", 1, "RifleBash")
			TNT1 A 0 A_PlaySound("KICK")
			TNT1 A 0 SetPlayerProperty(0,1,0)
			K1CK A 0 A_JumpIfInventory("IsPaladin",1,3)
			K2CK A 0 A_JumpIfInventory("IsSorcerer",1,2)
			KICK A 0
			"####" BCD 1
			"####" A 0 A_FireCustomMissile("KickAttack", 0, 0, 0, -7)
			"####" H 5 A_Takeinventory("Kicking",1)
			"####" IGF 1
			"####" A 0 A_Takeinventory("Kicking",1)
			"####" EDCBA 1 
			TNT1 A 0 SetPlayerProperty(0,0,0)
			TNT1 A 0 A_JumpIfInventory("ExecuteDownedEnemy", 1, "DoExecution")
			TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "GoingToReady")
			TNT1 A 0 A_JumpIfInventory("Kicking",1,"KickRight")
			Goto ReadyToFire
			BerserkerKick:
			TNT1 A 0 A_PlaySound("KICK")
			TNT1 A 0 SetPlayerProperty(0,1,0)
			K1CK A 0 A_JumpIfInventory("IsPaladin",1,3)
			K2CK A 0 A_JumpIfInventory("IsSorcerer",1,2)
			KICK A 0
					"####" BCD 1
			"####" A 0 A_FireCustomMissile("SuperKickAttack", 0, 0, 0, -7)
			"####" H 5 A_Takeinventory("Kicking",1)
			"####" IGF 1
			"####" A 0 
			"####" EDCBA 1 
			TNT1 A 0 SetPlayerProperty(0,0,0)
			TNT1 A 0 A_JumpIfInventory("ExecuteDownedEnemy", 1, "DoExecution")
			TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "GoingToReady")
			TNT1 A 0 A_JumpIfInventory("Kicking",1,"KickRight")
			Goto ReadyToFire
			KickRight:
			K1K2 A 0 A_JumpIfInventory("IsPaladin",1,3)
			K2K2 A 0 A_JumpIfInventory("IsSorcerer",1,2)
			KIK2 A 1 A_Giveinventory("Kicking",1)
			"####" ABC 1
			"####" A 0 A_PlaySound("KICK")
			"####" A 0 
			"####" A 0 A_SetPitch(pitch-9)
			"####" A 0 A_SetAngle(angle+9)
			"####" A 0 A_FireCustomMissile("KickAttack", 0, 0, 0, 0)
			"####" D 1
			"####" A 0 A_SetPitch(pitch+2)
			"####" A 0 A_SetAngle(angle-2)
			"####" D 1
			"####" A 0 A_SetPitch(pitch+2)
			"####" A 0 A_SetAngle(angle-2)
			"####" E 1 A_TakeInventory("Kicking",1)
			"####" A 0 A_SetPitch(pitch+1)
			"####" A 0 A_SetAngle(angle-1)
			"####" E 1
			"####" A 0 A_SetPitch(pitch+1)
			"####" A 0 A_SetAngle(angle-1)
			"####" C 1
			"####" A 0 A_SetPitch(pitch+1)
			"####" A 0 A_SetAngle(angle-1)
			"####" B 2 
			"####" A 0 A_SetPitch(pitch+1)
			"####" A 0 A_SetAngle(angle-1)
			"####" A 2 
			"####" A 0 A_SetPitch(pitch+1)
			"####" A 0 A_SetAngle(angle-1)
			"####" A 2 
			"####" A 1 A_JumpIfInventory("Kicking",1,"AirKick")
			Goto ReadyToFire
			AirKick:
			TNT1 A 0
			K1CK J 0 A_JumpIfInventory("IsPaladin",1,3)
			K2CK J 0 A_JumpIfInventory("IsSorcerer",1,2)
			KICK J 1
			"####" A 0 A_jumpifinventory("PowerStrength",1,"SuperAirKick")
			"####" A 0 A_PlaySound("KICK")
			"####" A 0 A_Recoil (-15)
			"####" JKLMN 1
			"####" A 0 A_FireCustomMissile("AirKickAttack", 0, 0, 0, -31)
			"####" A 0 
			"####" O 3
			"####" A 0 A_Takeinventory("Kicking",1)
			"####" PQ 2
			"####" RST 1 
			"####" A 0 A_JumpIfInventory("Kicking",1,"LeftFinishingKick")
			"####" A 0 A_JumpIfInventory("ExecuteDownedEnemy", 1, "DoExecution")
			"####" A 0 A_JumpIfInventory("GoFatality", 1, "GoingToReady")
			"####" A 2 
			"####" A 1 A_JumpIfInventory("Kicking",1,"LeftFinishingKick")
			Goto ReadyToFire
				SuperAirKick:
			TNT1 A 0
			K1CK J 0 A_JumpIfInventory("IsPaladin",1,3)
			K2CK J 0 A_JumpIfInventory("IsSorcerer",1,2)
			KICK J 1
			"####" A 0 A_jumpifinventory("PowerStrength",1,"SuperAirKick")
			"####" A 0 A_PlaySound("KICK")
			"####" A 0 A_Recoil (-15)
			"####" JKLMN 1
			"####" A 0 A_FireCustomMissile("SuperAirKickAttack", 0, 0, 0, -31)
			"####" O 3
			"####" A 0 A_Takeinventory("Kicking",1)
			"####" PQ 2
			"####" RST 1 
			"####" A 0 A_JumpIfInventory("ExecuteDownedEnemy", 1, "DoExecution")
			"####" A 0 A_JumpIfInventory("GoFatality", 1, "GoingToReady")
			"####" A 2 
			"####" A 1 A_JumpIfInventory("Kicking",1,"LeftFinishingKick")
			Goto ReadyToFire
			SlideAttack:
			TNT1 A 0
			TNT1 A 0 SetPlayerProperty(0,1,0)
			KICK A 0 A_Takeinventory("Kicking",1)
			TNT1 A 0 A_PlaySound("KICK")
			TNT1 A 0 A_Recoil (-16)
			TNT1 A 0 A_PlaySound("SlideKickStart", 5)
			S1DK A 0 A_JumpIfInventory("IsPaladin",1,3)
			S2DK A 0 A_JumpIfInventory("IsSorcerer",1,2)
			SLDK A 1
			"####" ABC 1
			"####" A 0 A_SetPItch(10)
			"####" A 0 A_FireCustomMissile("SlideAttack", 0, 0, 0, 10)
			"####" E 1
			"####" A 0 A_Recoil (-14)
			"####" A 0 A_SetPItch(10)
			"####" A 0 A_JumpIfInventory("KickHasHit", 1, "FinishSlideHitWall")
			"####" A 0 A_JumpIfInventory("IsCrouching", 1, 1)
			Goto FinishSlide
			"####" F 1 A_FireCustomMissile("SlideAttack", 0, 0, 0, 10)
			"####" A 0 A_Recoil (-12)
			"####" A 0 A_SetPItch(10)
			"####" A 0 A_JumpIfInventory("KickHasHit", 1, "FinishSlideHitWall")
			"####" A 0 A_JumpIfInventory("IsCrouching", 1, 1)
			Goto FinishSlide
					"####" G 1 A_FireCustomMissile("SlideAttack", 0, 0, 0, 10)
			"####" A 0 A_Recoil (-8)
			"####" A 0 A_SetPItch(10)
			"####" A 0 A_JumpIfInventory("KickHasHit", 1, "FinishSlideHitWall")
			"####" A 0 A_JumpIfInventory("IsCrouching", 1, 1)
			Goto FinishSlide
					"####" F 1 A_FireCustomMissile("SlideAttack", 0, 0, 0, 10)
			"####" A 0 A_Recoil (-6)
			"####" A 0 A_SetPItch(10)
			"####" A 0 A_JumpIfInventory("KickHasHit", 1, "FinishSlideHitWall")
			"####" A 0 A_JumpIfInventory("IsCrouching", 1, 1)
			Goto FinishSlide
					"####" G 1 A_FireCustomMissile("SlideAttack", 0, 0, 0, 10)
			"####" A 0 A_Recoil (-4)
			"####" A 0 A_SetPItch(10)
			"####" A 0 A_JumpIfInventory("KickHasHit", 1, "FinishSlideHitWall")
			"####" A 0 A_JumpIfInventory("IsCrouching", 1, 1)
			Goto FinishSlide
					"####" F 1 A_FireCustomMissile("SlideAttack", 0, 0, 0, 10)
			"####" A 0 A_Recoil (-4)
			"####" A 0 A_SetPItch(10)
			"####" A 0 A_JumpIfInventory("KickHasHit", 1, "FinishSlideHitWall")
			"####" A 0 A_JumpIfInventory("IsCrouching", 1, 1)
			Goto FinishSlide
					"####" G 1 A_FireCustomMissile("SlideAttack", 0, 0, 0, 10)
			"####" A 0 A_Recoil (-3)
			"####" A 0 A_SetPItch(10)
			"####" A 0 A_JumpIfInventory("KickHasHit", 1, "FinishSlideHitWall")
			"####" A 0 A_JumpIfInventory("IsCrouching", 1, 1)
			Goto FinishSlide
					"####" F 1 A_FireCustomMissile("SlideAttack", 0, 0, 0, 10)
			"####" A 0 A_Recoil (-3)
			"####" A 0 A_SetPItch(10)
			"####" A 0 A_JumpIfInventory("KickHasHit", 1, "FinishSlideHitWall")
			"####" A 0 A_JumpIfInventory("IsCrouching", 1, 1)
			Goto FinishSlide
					"####" G 1 A_FireCustomMissile("SlideAttack", 0, 0, 0, 10)
			"####" A 0 A_Recoil (-3)
			"####" A 0 A_SetPItch(10)
			"####" A 0 A_JumpIfInventory("KickHasHit", 1, "FinishSlideHitWall")
			"####" A 0 A_JumpIfInventory("IsCrouching", 1, 1)
			Goto FinishSlide
					"####" F 1 A_FireCustomMissile("SlideAttack", 0, 0, 0, 10)
			"####" A 0 A_Recoil (-2)
			"####" A 0 A_SetPItch(10)
			"####" A 0 A_JumpIfInventory("KickHasHit", 1, "FinishSlideHitWall")
			"####" A 0 A_JumpIfInventory("IsCrouching", 1, 1)
			Goto FinishSlide
					"####" G 1 A_FireCustomMissile("SlideAttack", 0, 0, 0, 10)
			"####" A 0 A_Recoil (-1)
			"####" A 0 A_SetPItch(10)
			"####" A 0 A_JumpIfInventory("KickHasHit", 1, "FinishSlideHitWall")
			"####" A 0 A_JumpIfInventory("IsCrouching", 1, 1)
			Goto FinishSlide
					"####" F 1 A_FireCustomMissile("SlideAttack", 0, 0, 0, 10)
			"####" A 0 A_Recoil (-1)
			"####" A 0 A_SetPItch(10)
			"####" A 0 A_JumpIfInventory("KickHasHit", 1, "FinishSlideHitWall")
			"####" A 0 A_JumpIfInventory("IsCrouching", 1, 1)
			Goto FinishSlide
					"####" G 1 A_FireCustomMissile("SlideAttack", 0, 0, 0, 10)
			"####" A 0 A_Recoil (-2)
			"####" A 0 A_SetPItch(10)
			"####" A 0 A_JumpIfInventory("KickHasHit", 1, "FinishSlideHitWall")
			"####" A 0 A_JumpIfInventory("IsCrouching", 1, 1)
			"####" A 0 A_TAkeInventory("KickHasHit", 1)
			Goto FinishSlide
				FinishSlide:	
			TNT1 A 0 A_Takeinventory("Kicking",1)
			TNT1 A 0
			TNT1 A 0 A_PlaySound("SlideKickStop", 5)
			S1DK H 0 A_JumpIfInventory("IsPaladin",1,3)
			S2DK H 0 A_JumpIfInventory("IsSorcerer",1,2)
			SLDK H 1
					"####" HD 2 
			"####" A 0 SetPlayerProperty(0,0,0)
			"####" A 0 A_JumpIfInventory("Kicking", 1, "LeftFinishingKick")
			"####" CBA 2 A_JumpIfInventory("Kicking", 1, "LeftFinishingKick")
			"####" A 0 A_JumpIfInventory("ExecuteDownedEnemy", 1, "DoExecution")
			"####" A 0 A_JumpIfInventory("GoFatality", 1, "GoingToReady")
			"####" A 0 A_Takeinventory("Kicking",1)
			Goto ReadyToFire	
				FinishSlideHitwall:	
			TNT1 A 0
			S1DK H 0 A_JumpIfInventory("IsPaladin",1,3)
			S2DK H 0 A_JumpIfInventory("IsSorcerer",1,2)
			SLDK H 1
			"####" A 0 A_Stop
			"####" HDCBA 2
			"####" A 0 A_TAkeInventory("KickHasHit", 1)
			"####" A 0 A_JumpIfInventory("ExecuteDownedEnemy", 1, "DoExecution")
			"####" A 0 A_JumpIfInventory("GoFatality", 1, "GoingToReady")
			"####" A 0 A_Takeinventory("Kicking",1)
			"####" A 0 SetPlayerProperty(0,0,0)
			Goto ReadyToFire		
		LeftFinishingKick:
			TNT1 A 0
			K1K3 A 0 A_JumpIfInventory("IsPaladin",1,3)
			K2K3 A 0 A_JumpIfInventory("IsSorcerer",1,2)
			KIK3 A 1
			"####" A 0 A_Recoil(-10)
			"####" ABC 1
			"####" A 0 A_PlaySound("KICK")
			"####" A 0 A_Giveinventory("Kicking",1)
			"####" A 0 A_SetPitch(pitch-9)
			"####" A 0 A_SetAngle(angle-9)
			"####" D 1 A_FireCustomMissile("KickAttack", 0, 0, 0, 0)
			"####" A 0 A_SetPitch(pitch+2)
			"####" A 0 A_SetAngle(angle+3)
			"####" E 1
			"####" A 0 A_SetPitch(pitch+2)
			"####" A 0 A_SetAngle(angle+3)
			"####" F 1 A_FireCustomMissile("KickAttack", 0, 0, 0, 0)
			"####" A 0 A_SetPitch(pitch+1)
			"####" A 0 A_SetAngle(angle+3)
			"####" G 1 
			"####" A 0 A_SetPitch(pitch+1)
			"####" A 0 A_SetAngle(angle+2)
			"####" H 1 A_FireCustomMissile("KickAttack", 0, 0, 0, 0)
			"####" A 0 A_SetPitch(pitch+1)
			"####" A 0 A_SetAngle(angle+2)
			"####" I 1
			"####" A 0 A_SetPitch(pitch+1)
			"####" A 0 A_SetAngle(angle+1)
			"####" J 1 A_FireCustomMissile("KickAttack", 0, 0, 0, 0)
			"####" A 0 A_SetPitch(pitch+1)
			"####" A 0 A_SetAngle(angle+1)
			"####" K 1
			TNT1 A 1 
			Goto ReadyToFire	
				Taunt:
			TNT1 A 0 A_Takeinventory("Taunting",1)
			Goto ReadyToFire
		Salute:
			TNT1 A 0 A_TakeInventory("Salute1",1)
			TNT1 A 0 A_TakeInventory("Salute2",1)
			Goto ReadyToFire	
		Steady:
		TNT1 A 1
		Goto ReadyToFire	
		Unload:
			TNT1 A 0
			TNT1 A 0 A_SetCrosshair(41)
			TNT1 A 1 A_WeaponReady(WRF_NOBOB)
			TNT1 A 0 A_Takeinventory("Unloading",1)
			TNT1 A 0 A_Takeinventory("ADSmode",1)
			TNT1 A 0 A_Takeinventory("Zoomed",1)
			TNT1 A 0 A_JumpIfInventory("DoubleRifleAmmo",1,3)
			RemoveBullets:
			TNT1 AAAA 0
			TNT1 A 0 A_JumpIfInventory("DoubleRifleAmmo",1,3)
			Goto FinishUnload
			TNT1 AAAAAA 0
			TNT1 A 0 A_Takeinventory("RifleAmmo",1)
			TNT1 A 0 A_Takeinventory("DoubleRifleAmmo",1)
			TNT1 A 0 A_Takeinventory("LeftRifleAmmo",1)
			TNT1 A 0 A_Giveinventory("Clip2",1)
			Goto RemoveBullets
			FInishUnload:
			TNT1 AAA 0
			TNT1 A 0 A_GiveInventory("StopDualWield")
			TNT1 A 0 A_Takeinventory("Zoomed",1)
			TNT1 A 0 A_PlaySound("Reload")
			TNT1 A 0 A_GiveInventory ("Pumping", 1)
			TNT1 A 0 A_Takeinventory("Unloading",1)
			P2SS FEDCBA 1
					P2RL A 0 A_JumpIfInventory("IsPaladin",1,3)
			R2ML A 0 A_JumpIfInventory("IsSorcerer",1,2)
			R2RL A 0
			"####" ONMLKJJIIHGFEDDDDDDDCCBA 1
					P2RR A 0 A_JumpIfInventory("IsPaladin",1,3)
			R2MR A 0 A_JumpIfInventory("IsSorcerer",1,2)
			R2RR A 0
			"####" ONMLKJJIIHGFEDDDDDDDCCBA 1
			P2SS ABCDEF 1
					TNT1 A 0 A_GiveInventory("HasUnloaded", 1)
			TNT1 A 0 A_TakeInventory("StopDualWield")
			TNT1 A 0 A_Takeinventory("Unloading",1)
			Goto Ready+6
				}
	}
	ACTOR LeftRifleAmmo : Ammo //Your weapon's magazine ammo.
	{
	   Inventory.Amount 0
	   Inventory.MaxAmount 31 //Your weapon's magazine ammo limit. Always leave one more bullet, so you can do the 12+1 effect.
	   Ammo.BackpackAmount 0
	   Ammo.BackpackMaxAmount 31
	   Inventory.Icon "RIFLA0"
	}
	//ACTOR Right/Rifle/Ammo : Ammo //Your weapon's magazine ammo.
	//{
	   //Inventory.Amount 0
	   //Inventory.MaxAmount 31 //Your weapon's magazine ammo limit. Always leave one more bullet, so you can do the 12+1 effect.
	   //Ammo.BackpackAmount 0
	   //Ammo.BackpackMaxAmount 31
	   //Inventory.Icon SMGPA0
	//}